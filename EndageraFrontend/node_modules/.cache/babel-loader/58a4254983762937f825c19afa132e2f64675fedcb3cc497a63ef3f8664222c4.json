{"ast":null,"code":"var _jsxFileName = \"E:\\\\EndangeraProtect\\\\EndageraFrontend\\\\src\\\\pages\\\\Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SpeciesCard from '../components/SpeciesCard'; // Ensure correct path to SpeciesCard component\nimport '../styles/Learn.css'; // Include your styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Learn = () => {\n  _s();\n  const [speciesList, setSpeciesList] = useState([]);\n\n  // Fetch species data on component mount\n  useEffect(() => {\n    const fetchSpecies = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/WildLife_API/species'); // Update API URL if needed\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setSpeciesList(data); // Update state with fetched species\n      } catch (error) {\n        console.error('Failed to fetch species:', error);\n      }\n    };\n    fetchSpecies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Learn About Species\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"species-grid\",\n      children: speciesList.length > 0 ? speciesList.map(species => /*#__PURE__*/_jsxDEV(SpeciesCard, {\n        species: species\n      }, species.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading species data or no species found...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Learn, \"nmAsHz5GwVkEgcGN/5GqL+h+dP8=\");\n_c = Learn;\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useState","useEffect","SpeciesCard","jsxDEV","_jsxDEV","Learn","_s","speciesList","setSpeciesList","fetchSpecies","response","fetch","ok","Error","statusText","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","species","id","_c","$RefreshReg$"],"sources":["E:/EndangeraProtect/EndageraFrontend/src/pages/Learn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SpeciesCard from '../components/SpeciesCard'; // Ensure correct path to SpeciesCard component\r\nimport '../styles/Learn.css'; // Include your styles\r\n\r\nconst Learn = () => {\r\n  const [speciesList, setSpeciesList] = useState([]);\r\n\r\n  // Fetch species data on component mount\r\n  useEffect(() => {\r\n    const fetchSpecies = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/WildLife_API/species'); // Update API URL if needed\r\n        if (!response.ok) {\r\n          throw new Error(`Error: ${response.statusText}`);\r\n        }\r\n        const data = await response.json();\r\n        setSpeciesList(data); // Update state with fetched species\r\n      } catch (error) {\r\n        console.error('Failed to fetch species:', error);\r\n      }\r\n    };\r\n\r\n    fetchSpecies();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"learn-container\">\r\n      <h1>Learn About Species</h1>\r\n      <div className=\"species-grid\">\r\n        {speciesList.length > 0 ? (\r\n          speciesList.map((species) => (\r\n            <SpeciesCard key={species.id} species={species} />\r\n          ))\r\n        ) : (\r\n          <p>Loading species data or no species found...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Learn;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,2BAA2B,CAAC,CAAC;AACrD,OAAO,qBAAqB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC,CAAC,CAAC;QAC5E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,UAAUH,QAAQ,CAACI,UAAU,EAAE,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCR,cAAc,CAACO,IAAI,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDR,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhB,OAAA;MAAAgB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BpB,OAAA;MAAKe,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1Bb,WAAW,CAACkB,MAAM,GAAG,CAAC,GACrBlB,WAAW,CAACmB,GAAG,CAAEC,OAAO,iBACtBvB,OAAA,CAACF,WAAW;QAAkByB,OAAO,EAAEA;MAAQ,GAA7BA,OAAO,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAClD,CAAC,gBAEFpB,OAAA;QAAAgB,QAAA,EAAG;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAClD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CAnCID,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAqCX,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}